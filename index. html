<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hybrid Power System Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.2/papaparse.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .metric-card {
            transition: all 0.3s ease-in-out;
        }
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .chart-container {
            position: relative;
            height: 40vh;
            width: 100%;
        }
        #file-drop-zone {
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
        }
        /* For the progress bar */
        .progress-bar-bg {
            background-color: #374151; /* gray-700 */
        }
        .progress-bar {
            transition: width 0.5s ease-in-out;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <div id="app-container" class="min-h-screen p-4 sm:p-6 lg:p-8">
        <!-- Header -->
        <header class="pb-6">
            <h1 class="text-3xl font-bold text-white tracking-tight">Hybrid Power System Dashboard</h1>
            <p id="timestamp" class="text-indigo-400 mt-1">Awaiting data upload...</p>
        </header>

        <!-- File Upload Section -->
        <div id="upload-section" class="max-w-4xl mx-auto text-center">
            <div id="file-drop-zone" class="mt-8 border-2 border-dashed border-gray-600 rounded-xl p-12 cursor-pointer bg-gray-800 hover:bg-gray-700 hover:border-indigo-500">
                <svg class="mx-auto h-12 w-12 text-gray-500" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <p class="mt-4 text-lg text-gray-300">
                    <span class="font-semibold text-indigo-400">Upload a file</span> or drag and drop
                </p>
                <p class="mt-1 text-sm text-gray-500">CSV file with your 24h system data</p>
                <input id="csv-file-input" type="file" class="hidden" accept=".csv">
            </div>
            <button id="load-demo-btn" class="mt-6 px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition">
                Load Demo Data
            </button>
        </div>

        <!-- Dashboard View -->
        <main id="dashboard-section" class="hidden">
            <!-- Primary Metrics Grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="metric-card bg-gray-800 p-6 rounded-xl shadow-lg">
                    <div class="flex items-center"><div class="bg-yellow-500/20 p-3 rounded-full"><svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg></div><h3 class="text-lg font-medium text-gray-300 ml-4">Solar Power</h3></div>
                    <p id="solar-power" class="text-4xl font-bold text-white mt-4">0.00 W</p>
                </div>
                <div class="metric-card bg-gray-800 p-6 rounded-xl shadow-lg">
                    <div class="flex items-center"><div class="bg-cyan-500/20 p-3 rounded-full"><svg class="w-6 h-6 text-cyan-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.5 6.5A2.5 2.5 0 016 4h12a2.5 2.5 0 012.5 2.5v11A2.5 2.5 0 0118 20H6a2.5 2.5 0 01-2.5-2.5v-11zM12 11a2 2 0 100-4 2 2 0 000 4zM6 16h12"></path></svg></div><h3 class="text-lg font-medium text-gray-300 ml-4">Wind Power</h3></div>
                    <p id="wind-power" class="text-4xl font-bold text-white mt-4">0.00 W</p>
                </div>
                <div class="metric-card bg-gray-800 p-6 rounded-xl shadow-lg">
                    <div class="flex items-center"><div class="bg-green-500/20 p-3 rounded-full"><svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg></div><h3 class="text-lg font-medium text-gray-300 ml-4">Battery Voltage</h3></div>
                    <p id="battery-voltage" class="text-4xl font-bold text-white mt-4">0.00 V</p>
                </div>
                <div class="metric-card bg-indigo-800 p-6 rounded-xl shadow-lg border border-indigo-600">
                    <div class="flex items-center"><div class="bg-indigo-500/30 p-3 rounded-full"><svg class="w-6 h-6 text-indigo-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg></div><h3 class="text-lg font-medium text-gray-200 ml-4">Total System Power</h3></div>
                    <p id="total-power" class="text-4xl font-bold text-white mt-4">0.00 W</p>
                </div>
            </div>

            <!-- Detailed Metrics Grid -->
             <h2 class="text-2xl font-bold text-white mt-10 mb-4 tracking-tight">System Details</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                 <!-- Solar Voltage -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <h3 class="text-md font-medium text-gray-400">Solar Voltage</h3>
                    <p id="solar-voltage-card" class="text-3xl font-bold text-yellow-400 mt-2">0.00 V</p>
                </div>
                <!-- Solar Current -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <h3 class="text-md font-medium text-gray-400">Solar Current</h3>
                    <p id="solar-current-card" class="text-3xl font-bold text-yellow-400 mt-2">0.00 A</p>
                </div>
                 <!-- Wind Voltage -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <h3 class="text-md font-medium text-gray-400">Wind Voltage</h3>
                    <p id="wind-voltage-card" class="text-3xl font-bold text-cyan-400 mt-2">0.00 V</p>
                </div>
                <!-- Wind Current -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <h3 class="text-md font-medium text-gray-400">Wind Current</h3>
                    <p id="wind-current-card" class="text-3xl font-bold text-cyan-400 mt-2">0.00 A</p>
                </div>
                <!-- Battery Health -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <div class="flex justify-between items-center">
                        <h3 class="text-md font-medium text-gray-400">Battery Health</h3>
                        <span id="battery-health-status" class="px-2 py-1 text-xs font-semibold rounded-full">...</span>
                    </div>
                    <p id="battery-health" class="text-3xl font-bold text-green-400 mt-2">0%</p>
                    <div class="w-full progress-bar-bg rounded-full h-2.5 mt-2">
                        <div id="battery-health-bar" class="progress-bar h-2.5 rounded-full" style="width: 0%"></div>
                    </div>
                </div>
                <!-- System Efficiency -->
                <div class="metric-card bg-gray-800 p-5 rounded-xl shadow-lg">
                    <h3 class="text-md font-medium text-gray-400">System Efficiency</h3>
                    <p id="system-efficiency" class="text-3xl font-bold text-indigo-400 mt-2">0%</p>
                    <p class="text-xs text-gray-500 mt-2">Performance vs. 24h peak generation</p>
                </div>
            </div>

            <!-- Charts Section -->
            <div class="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div class="bg-gray-800 p-6 rounded-xl shadow-lg"><h3 class="text-lg font-semibold text-white mb-4">Power Generation Over Time (W)</h3><div class="chart-container"><canvas id="powerChart"></canvas></div></div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-lg"><h3 class="text-lg font-semibold text-white mb-4">Voltage Levels Over Time (V)</h3><div class="chart-container"><canvas id="voltageChart"></canvas></div></div>
            </div>
             <button id="reset-btn" class="mt-8 w-full sm:w-auto px-6 py-3 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-500 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 transition">
                Upload New Data
            </button>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const uploadSection = document.getElementById('upload-section');
            const dashboardSection = document.getElementById('dashboard-section');
            const fileInput = document.getElementById('csv-file-input');
            const fileDropZone = document.getElementById('file-drop-zone');
            const loadDemoBtn = document.getElementById('load-demo-btn');
            const resetBtn = document.getElementById('reset-btn');

            // Dashboard Metrics
            const solarPowerEl = document.getElementById('solar-power');
            const windPowerEl = document.getElementById('wind-power');
            const batteryVoltageEl = document.getElementById('battery-voltage');
            const totalPowerEl = document.getElementById('total-power');
            const timestampEl = document.getElementById('timestamp');

            // Detailed Metrics
            const solarVoltageCardEl = document.getElementById('solar-voltage-card');
            const solarCurrentCardEl = document.getElementById('solar-current-card');
            const windVoltageCardEl = document.getElementById('wind-voltage-card');
            const windCurrentCardEl = document.getElementById('wind-current-card');
            const batteryHealthEl = document.getElementById('battery-health');
            const batteryHealthBarEl = document.getElementById('battery-health-bar');
            const batteryHealthStatusEl = document.getElementById('battery-health-status');
            const systemEfficiencyEl = document.getElementById('system-efficiency');

            let powerChart, voltageChart;
            let simulationInterval;
            let currentIndex = 0;
            let dataset = [];
            let maxTotalPower = 0;

            fileDropZone.addEventListener('click', () => fileInput.click());
            fileInput.addEventListener('change', (e) => handleFile(e.target.files[0]));
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => fileDropZone.addEventListener(eventName, preventDefaults, false));
            function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
            fileDropZone.addEventListener('dragenter', () => fileDropZone.classList.add('bg-gray-700', 'border-indigo-500'));
            fileDropZone.addEventListener('dragleave', () => fileDropZone.classList.remove('bg-gray-700', 'border-indigo-500'));
            fileDropZone.addEventListener('drop', (e) => {
                fileDropZone.classList.remove('bg-gray-700', 'border-indigo-500');
                handleFile(e.dataTransfer.files[0]);
            });

            loadDemoBtn.addEventListener('click', loadDemoData);
            resetBtn.addEventListener('click', resetDashboard);

            function handleFile(file) {
                if (file && file.type === 'text/csv') {
                    Papa.parse(file, {
                        header: true, dynamicTyping: true, skipEmptyLines: true,
                        complete: (results) => processData(results.data),
                        error: (error) => {
                            console.error("CSV parsing error:", error);
                            alert('Error parsing CSV file. Please check the file format.');
                        }
                    });
                } else { alert('Please upload a valid .csv file.'); }
            }

            function loadDemoData() {
                const demoCSV = `Time,Wind_V,Wind_I,Solar_V,Solar_I,Battery_V
00:00,12.5,2.1,0,0,24.5
01:00,13.1,2.5,0,0,24.6
02:00,14.0,2.8,0,0,24.8
03:00,13.5,2.6,0,0,24.7
04:00,12.8,2.2,0,0,24.5
05:00,11.5,1.8,0.5,0.1,24.3
06:00,10.2,1.5,5.2,1.5,24.4
07:00,9.8,1.3,15.5,4.5,24.9
08:00,10.5,1.6,22.0,6.8,25.5
09:00,11.1,1.9,28.5,8.2,26.1
10:00,12.0,2.0,30.1,9.0,26.5
11:00,12.5,2.1,31.5,9.5,26.8
12:00,12.2,2.0,32.0,9.8,27.0
13:00,11.8,1.9,31.0,9.2,26.7
14:00,11.5,1.8,29.5,8.5,26.3
15:00,12.1,2.0,25.0,7.1,25.8
16:00,13.0,2.4,18.0,5.0,25.2
17:00,13.8,2.7,8.0,2.1,24.9
18:00,14.5,3.0,1.2,0.3,24.8
19:00,15.1,3.3,0,0,25.0
20:00,14.8,3.1,0,0,24.9
21:00,14.2,2.9,0,0,24.8
22:00,13.5,2.6,0,0,24.7
23:00,13.0,2.3,0,0,24.6`;
                Papa.parse(demoCSV, { header: true, dynamicTyping: true, skipEmptyLines: true, complete: (results) => processData(results.data) });
            }

            function processData(data) {
                if (!data || data.length === 0) { alert('CSV file is empty or invalid.'); return; }
                dataset = data;
                currentIndex = 0;
                
                // Calculate max power for efficiency calculation
                maxTotalPower = 0;
                data.forEach(row => {
                    const totalP = (row.Solar_V * row.Solar_I) + (row.Wind_V * row.Wind_I);
                    if (totalP > maxTotalPower) {
                        maxTotalPower = totalP;
                    }
                });
                if(maxTotalPower === 0) maxTotalPower = 1; // Avoid division by zero

                uploadSection.classList.add('hidden');
                dashboardSection.classList.remove('hidden');

                const labels = dataset.map(row => row.Time);
                const solarPowerData = dataset.map(row => (row.Solar_V * row.Solar_I));
                const windPowerData = dataset.map(row => (row.Wind_V * row.Wind_I));
                const totalPowerData = dataset.map((row, i) => (solarPowerData[i] + windPowerData[i]));
                
                const solarVoltageData = dataset.map(row => row.Solar_V);
                const windVoltageData = dataset.map(row => row.Wind_V);
                const batteryVoltageData = dataset.map(row => row.Battery_V);

                initCharts(labels, { solarPowerData, windPowerData, totalPowerData }, { solarVoltageData, windVoltageData, batteryVoltageData });
                startSimulation();
            }

            function initCharts(labels, powerData, voltageData) {
                if (powerChart) powerChart.destroy();
                if (voltageChart) voltageChart.destroy();

                const chartOptions = {
                    responsive: true, maintainAspectRatio: false,
                    scales: {
                        x: { ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } },
                        y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } }
                    },
                    plugins: { legend: { labels: { color: '#d1d5db' } } },
                    interaction: { intersect: false, mode: 'index' },
                    elements: { point: { radius: 0, hoverRadius: 5, hitRadius: 10 } }
                };

                powerChart = new Chart('powerChart', {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            { label: 'Solar Power', data: powerData.solarPowerData, borderColor: '#facc15', backgroundColor: '#facc1533', fill: true, tension: 0.4 },
                            { label: 'Wind Power', data: powerData.windPowerData, borderColor: '#22d3ee', backgroundColor: '#22d3ee33', fill: true, tension: 0.4 },
                            { label: 'Total Power', data: powerData.totalPowerData, borderColor: '#818cf8', backgroundColor: '#818cf833', fill: true, tension: 0.4, borderWidth: 2 }
                        ]
                    },
                    options: chartOptions
                });

                voltageChart = new Chart('voltageChart', {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            { label: 'Solar Voltage', data: voltageData.solarVoltageData, borderColor: '#f59e0b', tension: 0.4 },
                            { label: 'Wind Voltage', data: voltageData.windVoltageData, borderColor: '#06b6d4', tension: 0.4 },
                            { label: 'Battery Voltage', data: voltageData.batteryVoltageData, borderColor: '#22c55e', tension: 0.4, borderWidth: 2 }
                        ]
                    },
                    options: chartOptions
                });
            }

            function updateDashboard(index) {
                const row = dataset[index];
                if (!row) return;

                const solarV = row.Solar_V || 0, solarI = row.Solar_I || 0;
                const windV = row.Wind_V || 0, windI = row.Wind_I || 0;
                const batteryV = row.Battery_V || 0;

                const solarP = solarV * solarI, windP = windV * windI, totalP = solarP + windP;

                // Update primary metrics
                solarPowerEl.textContent = `${solarP.toFixed(2)} W`;
                windPowerEl.textContent = `${windP.toFixed(2)} W`;
                batteryVoltageEl.textContent = `${batteryV.toFixed(2)} V`;
                totalPowerEl.textContent = `${totalP.toFixed(2)} W`;
                timestampEl.textContent = `Live Data Simulation | Time: ${row.Time}`;

                // Update detailed metrics
                solarVoltageCardEl.textContent = `${solarV.toFixed(2)} V`;
                solarCurrentCardEl.textContent = `${solarI.toFixed(2)} A`;
                windVoltageCardEl.textContent = `${windV.toFixed(2)} V`;
                windCurrentCardEl.textContent = `${windI.toFixed(2)} A`;

                // Calculate and display Battery Health (assuming 24V system, healthy range 22V-26V)
                const healthPercent = Math.max(0, Math.min(100, ((batteryV - 22) / (26 - 22)) * 100));
                batteryHealthEl.textContent = `${healthPercent.toFixed(0)}%`;
                batteryHealthBarEl.style.width = `${healthPercent}%`;
                
                // Update battery status color and text
                const statusClasses = ['px-2', 'py-1', 'text-xs', 'font-semibold', 'rounded-full'];
                if (healthPercent > 80) {
                    batteryHealthStatusEl.textContent = 'Good';
                    batteryHealthBarEl.className = 'progress-bar h-2.5 rounded-full bg-green-500';
                    batteryHealthStatusEl.className = ''; // reset
                    batteryHealthStatusEl.classList.add(...statusClasses, 'bg-gr
